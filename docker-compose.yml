version: '3.8'

services:
  php:
    build:
      context: docker/dockerfiles
      dockerfile: Php8Docker
      args:
        - DOCKER_USERNAME=${USERNAME}
        - DOCKER_UID=${USERID}
    env_file:
      - .env
    volumes:
      - ./src:/var/www
      - ./docker/php-ini:/usr/local/etc/php
      - ./docker/xdebug-ini/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/sampler:/usr/local/etc/sampler
    container_name: ${CONTAINER_NAME_API}
    restart: unless-stopped
    networks:
      - DevEnvNetwork
    tty: true
    stdin_open: true
    links:
      - mysql:database
    environment:
      PHP_INI_SCAN_DIR: "/usr/local/etc/php/custom.d:/usr/local/etc/php/conf.d"
    depends_on:
      - mysql

  nginx:
    build:
      context: docker/dockerfiles
      dockerfile: NginxDocker
    container_name: ${CONTAINER_NAME_NGINX}
    networks:
      - DevEnvNetwork
    links:
      - mysql:database
      - redis:redis
      - postgres:postgres
      - sentry:sentry
    ports:
      - ${HOST}:${HTTP_PORT}:80
    volumes:
      - ./docker/sites:/etc/nginx/conf.d
      - ./src:/var/www
    depends_on:
      - php

  mysql:
    build:
      context: docker/dockerfiles
      dockerfile: MysqlDocker
    container_name: ${CONTAINER_NAME_MYSQL}
    networks:
      - DevEnvNetwork
    ports:
      - ${HOST}:${MYSQL_PORT}:3306
    volumes:
      - ./docker/mysql:/etc/mysql/conf.d
      - ./docker/databases:/var/databases
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DEFAULT_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}


  redis:
    image: redis:latest
    container_name: ${CONTAINER_NAME_REDIS}
    profiles:
      - sentry
      - redis
    env_file:
      - .env
    restart: always
    networks:
      - DevEnvNetwork
    ports:
      - ${HOST}:${REDIS_PORT}:6379

  postgres:
    image: postgres:latest
    container_name: ${CONTAINER_NAME_POSTGRES}
    profiles:
      - sentry
      - postgres
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DEFAULT_DATABASE}
    networks:
      - DevEnvNetwork
    ports:
      - ${HOST}:${POSTGRES_PORT}:5432

  sentry:
    build:
      context: docker/dockerfiles
      dockerfile: SentryDocker
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}
    links:
      - redis:redis
      - postgres:postgres
    profiles:
      - sentry
    restart: always
    ports:
      - ${HOST}:${SENTRY_PORT}:9000
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - DevEnvNetwork

  sentry-cron:
    image: sentry:latest
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}-cron
    hostname: sentry-cron
    profiles:
      - sentry
    restart: always
    env_file:
      - .env
    depends_on:
      - sentry-redis
      - sentry-postgres
    command: "sentry run cron"
    networks:
      - DevEnvNetwork

  sentry-worker:
    image: sentry:latest
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}-worker
    hostname: sentry-worker
    profiles:
      - sentry
    restart: always
    env_file:
      - .env
    depends_on:
      - sentry-redis
      - sentry-postgres
    command: "sentry run worker"
    networks:
      - DevEnvNetwork

networks:
  DevEnvNetwork:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.29.0.0/16

volumes:
  src:
    name: "src_volume"
