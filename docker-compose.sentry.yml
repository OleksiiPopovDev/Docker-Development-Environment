version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: ${CONTAINER_NAME_REDIS}
    env_file:
      - .env
    restart: always
    networks:
      - DevEnvNetworkExternal
    ports:
      - ${HOST}:${REDIS_PORT}:6379

  postgres:
    image: postgres:latest
    container_name: ${CONTAINER_NAME_POSTGRES}
    env_file:
      - .env
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DEFAULT_DATABASE}
    networks:
      - DevEnvNetworkExternal
    ports:
      - ${HOST}:${POSTGRES_PORT}:5432

  sentry:
    build:
      context: docker/dockerfiles
      dockerfile: SentryDocker
      args:
        - DOCKER_SENTRY_VERSION=${DOCKER_SENTRY_VERSION}
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}
    links:
      - redis:redis
      - postgres:postgres
    restart: always
    ports:
      - ${HOST}:${SENTRY_PORT}:9000
    volumes:
      - ./docker/sentry:/var/backups
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - DevEnvNetworkExternal

  sentry-cron:
    image: sentry:${DOCKER_SENTRY_VERSION}
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}-cron
    hostname: sentry-cron
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run cron"
    networks:
      - DevEnvNetworkExternal

  sentry-worker:
    image: sentry:${DOCKER_SENTRY_VERSION}
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_POSTGRES_PORT=${POSTGRES_PORT}
      - SENTRY_DB_NAME=${POSTGRES_DEFAULT_DATABASE}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
      - SENTRY_REDIS_HOST=redis
      - SENTRY_REDIS_PORT=${REDIS_PORT}
    container_name: ${CONTAINER_NAME_SENTRY}-worker
    hostname: sentry-worker
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run worker"
    networks:
      - DevEnvNetworkExternal

networks:
  DevEnvNetworkExternal:
    external:
      name: DevEnvNetwork
